;; CPAMM with partial liquidity concentration:
;; J * (T + T0) = k, only Δk > 0 is allowed,
;; where J – jetton balance, T – TON balance,
;; T0 – initial shift (T0 = J_0 * P_min, i.e. initial jetton supply * minimal price),
;; k = T0 * J0.
;; Commission is deduced from the sent TON amount (when converting TON → Jetton)
;; or from the returned TON amount (when converting Jetton → TON).

;; == storage ==
;; must be aligned with save_data, poolConfigToCell
(
    ;; address-defining
    cell, ;; JETTON_METADATA (defines minter address and can be passed to factory for further deploy)
    ;; set during initiate
    int   ;; pool jetton balance (J)
  , int   ;; pool TON balance (T)
  , slice ;; FACTORY_ADDRESS
  , int   ;; is_inited
) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref(),     ;; JETTON_METADATA

        ;; 2^100 > 10^30, 10^21 with decimals: 9 – more than enough
        ds~load_uint(100)  ;; pool jetton balance
      , ds~load_uint(100)  ;; pool TON balance
      , ds~load_msg_addr() ;; FACTORY_ADDRESS
      , ds~load_uint(1)    ;; is_inited
    );
}

;; must be aligned with load_data, poolConfigToCell
() save_data(
    cell JETTON_METADATA,

    int jetton_balance
  , int ton_balance
  , slice FACTORY_ADDRESS
  , int is_inited
) impure inline {
    set_data(begin_cell()
        .store_ref(JETTON_METADATA)
        .store_uint(jetton_balance, 100)
        .store_uint(ton_balance, 100)
        .store_slice(FACTORY_ADDRESS)
        .store_uint(is_inited, 1)
    .end_cell());
}

;; == messages ==
const operation_initiate = 101;

const error_already_initiated = 0xfff0;
const error_not_allowed_before_initiate = 0xfff1;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; accept empty messages (sending TON to contract balance)
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int operation_type = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    var (JETTON_METADATA,
          _jetton_balance
        , _ton_balance
        , FACTORY_ADDRESS
        , is_inited
    ) = load_data();

    ;; handle initiate and attempts to handle other ops before initiation
    if (operation_type == operation_initiate) {
        if (~ is_inited) {
            _jetton_balance = in_msg_body~load_uint(100);
            FACTORY_ADDRESS = in_msg_body~load_msg_addr();
            is_inited = 1;
            save_data(JETTON_METADATA,
                  _jetton_balance
                , _ton_balance
                , FACTORY_ADDRESS
                , is_inited);
            return ();
        } else {
            throw(error_already_initiated);
        }
    }
    if ((operation_type != operation_initiate) & ~ is_inited) {
        throw(error_not_allowed_before_initiate);
    }
}

;; == getters ==
int jetton_balance() method_id {
    var (_, _jetton_balance
        , _, _, _
    ) = load_data();
    return _jetton_balance;
}

int ton_balance() method_id {
    var (_, _, _ton_balance
        , _, _
    ) = load_data();
    return _ton_balance;
}

