#include "imports/stdlib.fc";

;; this must be aligned with the minter's save_data contents (and deployJettonMinter's createFromConfig)
cell build_minter_init_data(int total_supply, slice admin_address, cell metadata, cell jetton_wallet_code) inline {
    return begin_cell()
        .store_coins(total_supply)
        .store_slice(admin_address)
        .store_ref(metadata)
        .store_ref(jetton_wallet_code)
    .end_cell();
}

;; == storage ==
;; this must be aligned with jettonFactoryConfigToCell
(
    cell, ;; minter_code
    cell  ;; wallet_code
) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_ref(), ;; minter_code
        ds~load_ref()  ;; wallet_code
    );
}

;; == messages ==
const operation_deploy_new_jetton = 1;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; accept empty messages (including sending TON to contract balance)
    if (in_msg_body.slice_empty?()) {
        return ();
    }

    int operation_type = in_msg_body~load_uint(32);
    (cell minter_code, cell wallet_code) = load_data();

    ;; deploy new counter
    if (operation_type == operation_deploy_new_jetton) {
    }
}
